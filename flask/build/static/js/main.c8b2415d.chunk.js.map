{"version":3,"sources":["francesco.png","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","statusEndpoint","infoEndpoint","infoLoading","state","booked","userEmail","deskName","deskId","_this2","axios","get","then","response","console","log","data","setState","user_email","name","_this3","infoRes","length","hostname","eth0Ip","wlan0Ip","getInfo","_this4","setInterval","getStatus","react_default","a","createElement","className","src","logo","alt","Fragment","React","Component","Boolean","window","location","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kRCyGzBC,qBA/Eb,SAAAA,EAAaC,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACvBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KALRQ,eAAiB,+CAIQP,EAHzBQ,aAAe,wBAGUR,EAFzBS,aAAuB,EAIrBT,EAAKU,MAAQ,CACXC,QAAQ,EACRC,UAAW,GACXC,SAAU,GACVC,OAAQ,GACRL,aAAa,GAPQT,2EAWb,IAAAe,EAAAZ,KACgB,KAAtBA,KAAKO,MAAMI,QACbE,IAAMC,IAAId,KAAKI,eAAiBJ,KAAKO,MAAMI,QAC1CI,KAAK,SAAAC,GACJC,QAAQC,IAAIF,EAASG,MACrBP,EAAKQ,SAAS,CACZZ,OAAQQ,EAASG,KAAKX,OACtBC,UAAWO,EAASG,KAAKE,WACzBX,SAAUM,EAASG,KAAKG,2CAMtB,IAAAC,EAAAvB,KAERa,IAAMC,IAAId,KAAKK,cAAcU,KAAM,SAAAS,GACjCP,QAAQC,IAAIM,GACRA,EAAQL,KAAK,GAAGM,QAClBF,EAAKH,SAAS,CACZM,SAAUF,EAAQL,KAAK,GACvBQ,OAAQH,EAAQL,KAAK,GAAG,GAAG,GAC3BS,QAASJ,EAAQL,KAAK,GAAG,GAAG,GAC5BR,OAAQa,EAAQL,KAAK,GACrBb,aAAa,kDAOnBN,KAAK6B,2CAGE,IAAAC,EAAA9B,KAQP,OAN+B,IAA3BA,KAAKO,MAAMD,aACbyB,YAAa,WACXD,EAAKE,aACJ,KAIHC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SACXH,EAAAC,EAAAC,cAAA,YAAOnC,KAAKO,MAAMmB,SAAlB,OAAgC1B,KAAKO,MAAMoB,OAA3C,QAAwD3B,KAAKO,MAAMqB,QAAnE,MAEFK,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,YAAOnC,KAAKO,MAAMG,WAEpBuB,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,UACjB,IAAvBvC,KAAKO,MAAMC,QACVyB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAM,SAAA,KACEP,EAAAC,EAAAC,cAAA,uBACcnC,KAAKO,MAAME,WAEzBwB,EAAAC,EAAAC,cAAA,mCA1EIM,IAAMC,YCRJC,QACW,cAA7BC,OAAOC,SAASnB,UAEe,UAA7BkB,OAAOC,SAASnB,UAEhBkB,OAAOC,SAASnB,SAASoB,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.c8b2415d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/francesco.7489ea26.png\";","import React, { Component } from 'react';\nimport logo from './francesco.png';\nimport axios from 'axios'\nimport './App.css';\n\ninterface IState {\n  booked?: boolean;\n  userEmail?: string;\n  deskName?: string;\n  deskId?: string;\n  eth0Ip?: string;\n  wlan0Ip?: string;\n  hostname?: string;\n  infoLoading?: boolean;\n}\n\ninterface IProps {\n  statusEndpoint?: string\n}\n\nclass App extends React.Component<IProps, IState> {\n\n  statusEndpoint = 'https://arup-iot-desk.appspot.com/api/desks/';\n  infoEndpoint = 'http://localhost/info';\n  infoLoading: boolean = true;\n\n  constructor (props: any) {\n    super(props)\n    this.state = {\n      booked: false,\n      userEmail: '' ,\n      deskName: '',\n      deskId: '',\n      infoLoading: true\n    }\n  }\n\n  getStatus() {\n    if (this.state.deskId !== '') {\n      axios.get(this.statusEndpoint + this.state.deskId)\n      .then(response => {\n        console.log(response.data)\n        this.setState({\n          booked: response.data.booked,\n          userEmail: response.data.user_email,\n          deskName: response.data.name\n        })\n      })\n    }\n  }\n\n  getInfo() {\n\n    axios.get(this.infoEndpoint).then( infoRes => {\n      console.log(infoRes);\n      if (infoRes.data[2].length) {\n        this.setState({\n          hostname: infoRes.data[0],\n          eth0Ip: infoRes.data[2][0][2],\n          wlan0Ip: infoRes.data[2][1][2],\n          deskId: infoRes.data[1],\n          infoLoading: false\n        })\n      }\n    })    \n  }\n\n  componentDidMount() {\n    this.getInfo(); \n  }\n\n  render() {\n\n    if (this.state.infoLoading !== false) {\n      setInterval( () => {\n        this.getStatus()  \n      }, 4000)  \n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p className='debug'>\n            <code>{this.state.hostname} : ({this.state.eth0Ip}) : ({this.state.wlan0Ip})</code>\n          </p>\n          <p>\n            <code>{this.state.deskName}</code>\n          </p>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          {this.state.booked ===  true && \n            <>\n              <p>\n                Booked by: {this.state.userEmail}\n              </p>\n              <p>\n                until 5:30pm\n              </p>\n            </>\n          }\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}